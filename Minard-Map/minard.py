# -*- coding: utf-8 -*-
"""Minard.ipynb

Automatically generated by Colaboratory.

"""

'''
Program to plot Minard's Chart
'''
import pandas as pd
import altair as alt

#Reading Excel Data shared in Blackboard
dat = pd.read_excel('data/minard-data.xlsx')
projection_type="mercator"

#Colour Definitions
orange="#FFA500"
grey="#666666"
black="#000000"
trail_scale=[1,40]

#Cleaning City Data from the Excel
mycities = pd.concat([dat['LONC'],dat['LATC'],dat['CITY']],axis=1)
mycities = mycities.dropna(how='all')

#Cleaning Temperature Data from the Excel
mytemp = pd.concat([dat['LONT'],dat['TEMP'],dat['DAYS'],dat['DAY'],dat['MON']],axis=1)
mytemp = mytemp.dropna(how='all')
mytemp = mytemp.fillna("")
for i in range(len(mytemp['DAY'])):
  if (mytemp['DAY'][i]!=""):
    mytemp.loc[i,'DAY']=int(mytemp['DAY'][i])
mytemp['DATE'] = mytemp.apply(func=lambda row: "{} {}".format(row[3],row[4]),axis=1)
for i in range(len(mytemp['DAY'])):
  if (mytemp['DAY'][i]!=""):
    mytemp.loc[i,'graph_data'] = str(int(mytemp['TEMP'][i]))+"°C on "+str(mytemp['DATE'][i])
  else:
    mytemp.loc[i,'graph_data'] = str(int(mytemp['TEMP'][i]))+"°C"
del mytemp['DAY']
del mytemp['MON']

myarmy=pd.concat([dat['LONP'],dat['LATP'],dat['SURV'],dat['DIR'],dat['DIV']],axis=1)
# Appending Missing Data from excel
mdata_01=[37.6,55.8,100000,'A',1]
mdata_02=[28.7,55.5,30000,'A',2]
mdata_03=[24.6,55.8,6000,'A',3]
header=['LONP','LATP','SURV','DIR','DIV']
myarmy=myarmy.append(pd.Series(mdata_01, index=header), ignore_index=True)
myarmy=myarmy.append(pd.Series(mdata_02, index=header), ignore_index=True)
myarmy=myarmy.append(pd.Series(mdata_03, index=header), ignore_index=True)

#Troops Trail
army_chart = alt.Chart(myarmy).mark_trail().encode(
    longitude='LONP',latitude='LATP',
    size=alt.Size('SURV',
        scale=alt.Scale(range=trail_scale), #Scaling the army size to fit properly in map
        legend=None),
    detail='DIV',
    color=alt.Color(
        'DIR', #Setting how the colour should vary upon.
        scale=alt.Scale(
            domain=['A', 'R'], #Possible values for direction.
            range=[orange, grey] #Colour for two direction.
        ),legend=None),
).project(type=projection_type)

#City Names
city_chart = alt.Chart(mycities).mark_text(font='Monospace', #Font
    fontSize=10, dx=-3 #Distance from the datapoint the label must be printed
).encode(longitude='LONC',latitude='LATC',text='CITY', #What is used for labels
).project(type=projection_type) #Map Projection

#Temp Return
x_encode = alt.X('LONT',scale=alt.Scale(domain=[mycities["LONC"].min(), mycities["LONC"].max()]),axis=None)
y_encode = alt.Y('TEMP',axis=alt.Axis(title="Temperature",grid=True, orient='right')) 

temp_chart = alt.Chart(mytemp).mark_line(color=grey).encode(
    x=x_encode,
    y=y_encode
    )+ alt.Chart(mytemp).mark_text(dx=-5,dy=15,font='Monospace',fontSize=10
).encode(x=x_encode,y=y_encode,text='graph_data')
temp_chart = temp_chart.properties(height=100)

fc = alt.vconcat(army_chart + city_chart, temp_chart).configure_view(width=900,height=400,strokeWidth=0
).configure_axis(grid=False,labelFont="Monospace",titleFont="Cardo")
fc.display()
fc.save("minard.html")